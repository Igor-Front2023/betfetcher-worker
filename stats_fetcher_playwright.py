# stats_fetcher_playwright.py
import asyncio
from playwright.async_api import async_playwright
from bs4 import BeautifulSoup


async def fetch_h2h(url: str, team1: str = None, team2: str = None, limit: int = 5):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á (H2H) —Å —Å–∞–π—Ç–∞ Flashscore.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Playwright –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    [
        {"date": "...", "score": "2:0", "winner": "Team1"},
        ...
    ]
    """
    print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º H2H —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")

    matches = []
    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True)
            page = await browser.new_page()
            await page.goto(url, timeout=60000)
            await page.wait_for_selector("div.h2h__table", timeout=25000)

            html = await page.content()
            await browser.close()

        soup = BeautifulSoup(html, "html.parser")

        # –ò—â–µ–º –≤—Å–µ —Ä—è–¥—ã –º–∞—Ç—á–µ–π
        match_blocks = soup.select("div.h2h__table div.h2h__row") or soup.select("div.h2h__table div")

        for row in match_blocks[:limit]:
            text = row.get_text(" ", strip=True)

            # –ò—â–µ–º –¥–∞—Ç—É –∏ —Å—á—ë—Ç
            date = ""
            score = ""
            parts = text.split()
            for part in parts:
                if ":" in part and len(part) <= 5:  # 2:0, 1:1, 3:2
                    score = part
                if "-" in part and len(part.split("-")) == 3:  # –¥–∞—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 2025-10-01
                    date = part

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ —Å—á—ë—Ç—É
            winner = "Draw"
            try:
                if ":" in score:
                    left, right = score.split(":")
                    left, right = int(left), int(right)
                    if left > right:
                        winner = team1 or "Team1"
                    elif right > left:
                        winner = team2 or "Team2"
            except Exception:
                pass

            matches.append({
                "date": date,
                "score": score,
                "winner": winner,
                "text": text
            })

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} –æ—á–Ω—ã—Ö –º–∞—Ç—á–µ–π")
        return matches

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ H2H –¥–∞–Ω–Ω—ã—Ö: {e}")
        return matches


# –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞
if __name__ == "__main__":
    async def main():
        url = "https://www.flashscorekz.com/match/tennis/back-dayeon-WWkxyOw9/reyngold-ekaterina-lpjDUxQf/h2h/all-surfaces/?mid=xzFatGtA"
        data = await fetch_h2h(url, team1="Back Dayeon", team2="Reyngold Ekaterina")
        for m in data:
            print(m)

    asyncio.run(main())
