import asyncio
from datetime import datetime
import aiohttp


async def get_working_pari_host():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–µ—Ä–∫–∞–ª–∞ PARI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π."""
    hosts = [
        "https://line-lb01-w.pb06e2-resources.com",
        "https://line-lb02-w.pb06e2-resources.com",
        "https://line-lb51-w.pb06e2-resources.com",
        "https://line-lb52-w.pb06e2-resources.com",
    ]
    test_path = "/events/list?lang=ru&scopeMarket=2300"
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:139.0) Gecko/20100101 Firefox/139.0",
        "Accept": "*/*",
    }

    async with aiohttp.ClientSession() as session:
        for host in hosts:
            url = f"{host}{test_path}"
            try:
                async with session.get(url, headers=headers, timeout=5) as response:
                    if response.status == 200:
                        print(f"‚úÖ –†–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä PARI: {host}")
                        return host
            except Exception as e:
                print(f"‚ö†Ô∏è {host} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ({e})")
                continue

    print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ PARI.")
    return None


async def fetch_pari_events(base_url):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç live-—Å–æ–±—ã—Ç–∏—è —Å PARI."""
    url = f"{base_url}/events/list?lang=ru&scopeMarket=2300"
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:139.0) Gecko/20100101 Firefox/139.0",
        "Accept": "*/*",
        "Referer": "https://pari.ru/",
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, timeout=10) as response:
            if response.status != 200:
                raise ConnectionError(f"HTTP {response.status}")
            data = await response.json(content_type=None)
            return data.get("sports", [])


async def fetcher_loop(notifier, update_interval=120):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ-–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    base_url = await get_working_pari_host()
    if not base_url:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä PARI –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.")
        await notifier.send_to_admin("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ PARI.")
        return

    while True:
        try:
            sports = await fetch_pari_events(base_url)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {base_url}: {e}")
            await notifier.send_to_admin(f"‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {base_url}, –∏—â–µ–º –Ω–æ–≤–æ–µ –∑–µ—Ä–∫–∞–ª–æ...")
            base_url = await get_working_pari_host()
            if not base_url:
                print("‚õî –í—Å–µ –∑–µ—Ä–∫–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.")
                await asyncio.sleep(update_interval)
                continue
            else:
                await notifier.send_to_admin(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ {base_url}")
                continue

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º 1.1‚Äì1.4
        signals = []
        for sport in sports:
            sport_name = sport.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            for event in sport.get("events", []):
                teams = event.get("name", "‚Äî")
                odds_raw = event.get("markets", [])

                valid_odds = []
                for market in odds_raw:
                    for outcome in market.get("outcomes", []):
                        try:
                            odd = float(outcome.get("price", "0").replace(",", "."))
                            if 1.1 <= odd <= 1.4:
                                valid_odds.append(odd)
                        except Exception:
                            continue

                if valid_odds:
                    signals.append({
                        "sport": sport_name,
                        "teams": teams,
                        "odds": valid_odds
                    })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if signals:
            text = "üéØ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
            for s in signals[:5]:
                text += (
                    f"üèÖ {s['sport']}\n"
                    f"‚öîÔ∏è {s['teams']}\n"
                    f"üí∞ –ö–æ—ç—Ñ: {', '.join(map(str, s['odds']))}\n\n"
                )
            await notifier.send_to_admin(text)
        else:
            print(f"[heartbeat] {datetime.utcnow()} ‚Äî –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.")

        await asyncio.sleep(update_interval)
