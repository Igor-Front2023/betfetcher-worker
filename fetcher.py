# fetcher.py
import aiohttp
import asyncio
from notifier import Notifier
from match_predictor import analyze_event

API_URL = "https://pari.ru/api/v1/events/live"

async def fetch_live_data():
    """–ü–æ–ª—É—á–∞–µ—Ç live —Å–æ–±—ã—Ç–∏—è —Å PARI."""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(API_URL, timeout=15) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get("sports", [])
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ PARI: {response.status}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PARI: {e}")
    return []

async def process_sport(sport_data, notifier):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –∏ –∏—â–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è."""
    sport_name = sport_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    events = sport_data.get("events", [])
    signals = []

    for event in events:
        teams = event.get("name", "N/A")
        markets = event.get("markets", [])

        valid_odds = []
        for market in markets:
            outcomes = market.get("outcomes", [])
            for o in outcomes:
                odd = o.get("odd", 0)
                if 1.1 <= odd <= 1.4:
                    valid_odds.append({
                        "name": o.get("name", "Unknown"),
                        "odd": odd
                    })

        if valid_odds:
            event_data = {
                "sport": sport_name,
                "teams": teams,
                "odds": valid_odds
            }
            signals.append(event_data)

            # –ê–Ω–∞–ª–∏–∑ H2H —á–µ—Ä–µ–∑ Flashscore
            try:
                await analyze_event(event_data, notifier)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    return signals

async def fetch_and_analyze(notifier):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π + –∞–Ω–∞–ª–∏–∑."""
    sports = await fetch_live_data()
    all_signals = []

    for sport in sports:
        signals = await process_sport(sport, notifier)
        all_signals.extend(signals)

    return all_signals

async def fetcher_loop(notifier: Notifier):
    """–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π."""
    while True:
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å PARI...")
        try:
            signals = await fetch_and_analyze(notifier)
            if not signals:
                print("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ fetcher_loop: {e}")

        await asyncio.sleep(120)  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 2 –º–∏–Ω—É—Ç—ã
