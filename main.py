import os
import asyncio
import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
UPDATE_INTERVAL = int(os.getenv("UPDATE_INTERVAL", "180"))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –º–∏–Ω)

if not TOKEN or not ADMIN_ID:
    raise SystemExit("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ BOT_TOKEN –∏ ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Å—Ç–∞–≤–æ–∫ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await update.message.reply_text(f"üì° –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω.\n–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {now}")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö ===
async def notify_admin(bot, message: str):
    try:
        await bot.send_message(chat_id=ADMIN_ID, text=message)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")

# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ===
async def fetcher_loop(bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ‚Äî –ø–∞—Ä—Å–∏–Ω–≥ –∏–ª–∏ API-–∑–∞–ø—Ä–æ—Å—ã"""
    while True:
        try:
            print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω–∏–∏ —Å—Ç–∞–≤–æ–∫...")

            # --- –¢–≤–æ—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ---
            # –ù–∞–ø—Ä–∏–º–µ—Ä: await fetch_latest_bets()
            # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
            await bot.send_message(chat_id=ADMIN_ID, text="üìä –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

            await asyncio.sleep(UPDATE_INTERVAL)
        except Exception as e:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ fetcher_loop:\n{e}"
            print(error_msg)
            await notify_admin(bot, error_msg)
            await asyncio.sleep(10)  # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main_async():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("stop", stop))

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    asyncio.create_task(fetcher_loop(app.bot))

    print("‚úÖ Bot started. Listening for commands...")
    await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main_async())
