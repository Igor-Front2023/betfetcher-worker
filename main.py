# main.py ‚Äî Render-ready (–±–µ–∑ .env)
import os
import asyncio
import signal
import datetime
import traceback
from typing import Optional, Dict, Any
import aiohttp
from aiohttp import web
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
UPDATE_INTERVAL = int(os.getenv("UPDATE_INTERVAL", "180"))
HTTP_PORT = int(os.getenv("PORT", 10000))

if not TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
if not ADMIN_ID:
    raise SystemExit("‚ùå ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω.")
ADMIN_ID = int(ADMIN_ID)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
def log(msg: str):
    t = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{t} UTC] {msg}", flush=True)

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ===
class Notifier:
    def __init__(self, bot):
        self.bot = bot
        self.admin_id = ADMIN_ID

    async def notify(self, text: str):
        try:
            await self.bot.send_message(chat_id=self.admin_id, text=text[:4000])
        except Exception as e:
            log(f"Notifier error: {e}")

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ ===
tracked_signals: Dict[str, Dict[str, Any]] = {}

# === –ü–∞—Ä—Å–µ—Ä Pari.ru ===
async def fetch_live_events(session: aiohttp.ClientSession):
    url = "https://pari.ru/live/"
    try:
        async with session.get(url, timeout=20) as resp:
            html = await resp.text()
            soup = BeautifulSoup(html, "html.parser")
            events = []

            # –ø—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞: –∏—â–µ–º –±–ª–æ–∫–∏ –º–∞—Ç—á–µ–π (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞)
            for match_div in soup.select("div.live-event-row"):
                try:
                    teams = match_div.select_one("div.team-names").get_text(strip=True)
                    odds_str = match_div.select_one("div.odds-value").get_text(strip=True)
                    odds = float(odds_str.replace(",", "."))
                    link = match_div.select_one("a.event-link")["href"]
                    events.append({
                        "teams": teams,
                        "odds": odds,
                        "link": f"https://pari.ru{link}"
                    })
                except Exception:
                    continue
            return events
    except Exception as e:
        log(f"Error fetching live events: {e}")
        return []

# === –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
async def analyze_event(session: aiohttp.ClientSession, event):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: —Å–æ–±—ã—Ç–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏ odds 1.05‚Äì1.33
    odds = event["odds"]
    if 1.05 <= odds <= 1.33:
        probability = 0.75  # –ø—Ä–∏–º–µ—Ä –æ—Ü–µ–Ω–∫–∏ 75%
        return probability
    return 0.0

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ ===
async def fetcher_loop(bot, notifier: Notifier, update_interval: int = 180):
    backoff = 5
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                events = await fetch_live_events(session)
                if events:
                    for ev in events:
                        event_id = ev["teams"] + "_" + str(ev["odds"])
                        if event_id in tracked_signals:
                            continue
                        prob = await analyze_event(session, ev)
                        if prob >= 0.7:
                            text = (
                                f"[SIGNAL]\n"
                                f"Event: {ev['teams']}\n"
                                f"Odds: {ev['odds']}\n"
                                f"Probability: {int(prob*100)}%\n"
                                f"Link: {ev['link']}"
                            )
                            await notifier.notify(text)
                            tracked_signals[event_id] = {
                                "sent_at": datetime.datetime.utcnow().isoformat(),
                                "odds": ev["odds"],
                                "teams": ev["teams"],
                                "link": ev["link"]
                            }
                else:
                    now = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                    await notifier.notify(f"[heartbeat] {now} UTC ‚Äî –±–æ—Ç –∂–∏–≤. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
                await asyncio.sleep(update_interval)
            except Exception as e:
                tb = traceback.format_exc()
                log(f"Error in fetcher_loop: {e}\n{tb}")
                try:
                    await notifier.notify(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ fetcher_loop: {e}")
                except Exception:
                    pass
                await asyncio.sleep(backoff)
                backoff = min(backoff * 2, 300)

# === Telegram –∫–æ–º–∞–Ω–¥—ã ===
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = len(tracked_signals)
    now = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    await update.message.reply_text(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª–æ–≤: {active}\n{now} UTC")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram ===
application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(CommandHandler("status", cmd_status))

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä Render ===
async def handle_root(request):
    return web.Response(text="‚úÖ Bot is running on Render!")

async def start_web_server(runner_container):
    web_app = web.Application()
    web_app.router.add_get("/", handle_root)
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", HTTP_PORT)
    await site.start()
    runner_container["runner"] = runner
    log(f"üåê Web server started on port {HTTP_PORT}")

async def stop_web_server(runner_container):
    runner = runner_container.get("runner")
    if runner:
        await runner.cleanup()
        log("üåê Web server stopped")

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    notifier = Notifier(application.bot)
    runner_container = {}
    stop_event = asyncio.Event()

    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, lambda: stop_event.set())
        except NotImplementedError:
            pass

    log("üöÄ Initializing bot...")
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    log("‚úÖ Telegram polling started")

    web_task = asyncio.create_task(start_web_server(runner_container))
    fetcher_task = asyncio.create_task(fetcher_loop(application.bot, notifier, update_interval=UPDATE_INTERVAL))

    try:
        await notifier.notify("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render (–±–µ–∑ .env).")
    except Exception:
        pass

    await stop_event.wait()
    log("üõë Stopping bot...")

    fetcher_task.cancel()
    await application.updater.stop()
    await application.stop()
    await application.shutdown()
    await stop_web_server(runner_container)
    log("‚úÖ Graceful shutdown complete.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        log(f"Fatal error in main: {e}")
        raise
