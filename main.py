import os
import asyncio
import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

from fetcher import fetcher_loop
from notifier import Notifier

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
UPDATE_INTERVAL = int(os.getenv("UPDATE_INTERVAL", "60"))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN or not ADMIN_ID:
    raise SystemExit("‚ùå Please set BOT_TOKEN and ADMIN_ID in environment variables.")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Å—Ç–∞–≤–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã —Å—é–¥–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    await update.message.reply_text(f"üì° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {now} UTC")

# –ö–æ–º–∞–Ω–¥–∞ /stop (–ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞)
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏.")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
async def background_task(app):
    notifier = Notifier(app.bot, int(ADMIN_ID))
    await fetcher_loop(notifier, update_interval=UPDATE_INTERVAL)

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main_async():
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("stop", stop))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª
    asyncio.create_task(background_task(app))

    print("‚úÖ Bot started and is listening for commands...")
    await app.run_polling(allowed_updates=Update.ALL_TYPES)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        asyncio.run(main_async())
    except (KeyboardInterrupt, SystemExit):
        print("üõë Bot stopped manually.")

