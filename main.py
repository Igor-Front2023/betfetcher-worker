# main.py
import os
import asyncio
import signal
import datetime
import traceback
from aiohttp import web
from telegram.ext import Application, CommandHandler, ContextTypes
from notifier import Notifier
from fetcher import fetcher_loop


# === üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
def get_env(name: str, required: bool = True, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    value = os.getenv(name, default)
    if required and not value:
        raise SystemExit(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {name} –Ω–µ –∑–∞–¥–∞–Ω–∞ (–¥–æ–±–∞–≤—å –≤ Render ‚Üí Environment).")
    return value


BOT_TOKEN = get_env("BOT_TOKEN")
ADMIN_CHAT_ID = int(get_env("ADMIN_CHAT_ID"))
UPDATE_INTERVAL = int(get_env("UPDATE_INTERVAL", required=False, default="180"))
HTTP_PORT = int(get_env("PORT", required=False, default="10000"))


# === üß† –£—Ç–∏–ª–∏—Ç—ã ===
def log(msg: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    t = datetime.datetime.now(datetime.UTC).strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{t} UTC] {msg}", flush=True)


# === ü§ñ –ö–æ–º–∞–Ω–¥—ã Telegram ===
async def cmd_start(update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

async def cmd_status(update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now(datetime.UTC).strftime("%Y-%m-%d %H:%M:%S")
    await update.message.reply_text(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n{now} UTC")


# === üåê HTTP —Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render Healthcheck) ===
async def handle_root(request):
    return web.Response(text="‚úÖ Bot is running!")

async def start_web_server(runner_container):
    web_app = web.Application()
    web_app.router.add_get("/", handle_root)
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", HTTP_PORT)
    await site.start()
    runner_container["runner"] = runner
    log(f"üåê Web server started on port {HTTP_PORT}")

async def stop_web_server(runner_container):
    runner = runner_container.get("runner")
    if runner:
        await runner.cleanup()
        log("üåê Web server stopped")


# === üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    log("üöÄ Initializing Telegram bot...")

    try:
        application = Application.builder().token(BOT_TOKEN.strip()).build()
    except Exception as e:
        raise SystemExit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω. ({e})")

    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("status", cmd_status))

    notifier = Notifier(application.bot, ADMIN_CHAT_ID)

    # –ó–∞–ø—É—Å–∫ Telegram –∏ HTTP
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    log("‚úÖ Telegram polling started")

    runner_container = {}
    web_task = asyncio.create_task(start_web_server(runner_container))
    fetcher_task = asyncio.create_task(fetcher_loop(notifier, update_interval=UPDATE_INTERVAL))

    try:
        await notifier.notify("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É —Å–æ–±—ã—Ç–∏–π.")
    except Exception as e:
        log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

    # –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∏–≥–Ω–∞–ª–æ–≤
    stop_event = asyncio.Event()
    loop = asyncio.get_running_loop()

    def _on_signal():
        stop_event.set()

    try:
        loop.add_signal_handler(signal.SIGINT, _on_signal)
        loop.add_signal_handler(signal.SIGTERM, _on_signal)
    except NotImplementedError:
        pass  # –¥–ª—è Windows –∏ Render

    await stop_event.wait()
    log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    fetcher_task.cancel()
    try:
        await fetcher_task
    except asyncio.CancelledError:
        pass

    await application.updater.stop_polling()
    await application.stop()
    await application.shutdown()
    await stop_web_server(runner_container)
    log("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print("‚ùå Fatal error in main:", e)
        traceback.print_exc()
