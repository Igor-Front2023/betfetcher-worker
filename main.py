import os
import asyncio
import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
UPDATE_INTERVAL = int(os.getenv("UPDATE_INTERVAL", "180"))

if not TOKEN or not ADMIN_ID:
    raise SystemExit("‚ùå –£–∫–∞–∂–∏ BOT_TOKEN –∏ ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render!")

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Å—Ç–∞–≤–æ–∫ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await update.message.reply_text(f"üì° –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω.\n–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {now}")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ===
async def fetcher_loop(bot):
    while True:
        try:
            print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω–∏–∏ —Å—Ç–∞–≤–æ–∫...")
            await bot.send_message(chat_id=ADMIN_ID, text="üìä –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            await asyncio.sleep(UPDATE_INTERVAL)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ fetcher_loop: {e}")
            await asyncio.sleep(10)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("stop", stop))

    await app.initialize()
    await app.start()
    await app.updater.start_polling()

    asyncio.create_task(fetcher_loop(app.bot))

    print("‚úÖ Bot started. Listening for commands...")

    # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
